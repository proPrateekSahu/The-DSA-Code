// Quick Sort
#include <bits/stdc++.h>
#define ll long long

ll a[10]={5,7,1,3,6,4,9,10,11,25};
using namespace std;

ll partition(ll l,ll r){
    ll p=l;
    ll i=l,q=l+1;
    for(q=l+1;q<=r;q++){
        if(a[q]<=a[p]){
            i++;
            swap(a[i],a[q]);
        }
        
    }
    swap(a[p],a[i]);
    return i;
}

void QuickSort(ll l,ll r){
    if(l>=r)return;
    else{
        ll pivotIndex=partition(l,r);
        QuickSort(l,pivotIndex-1);
        QuickSort(pivotIndex+1,r);
        
    }
}


int main()
{
    QuickSort(0,9);
    ll n=10;
    for(ll i=0;i<n;i++){
        cout<<a[i]<<" ";
    }

    return 0;
}



______________________________________________________________________________________________________________________________________________________

//QuickSort (One side recurion and other side looping)

#include <bits/stdc++.h>
using namespace std;
#define ll long long



int partition(int a[],int p,int q){
    int pivot=p;
    int i=p,j=p+1;
    for(j;j<=q;j++){
        if(a[p]>=a[j]){
            i++;
            swap(a[i],a[j]);
        }
    }
    swap(a[i],a[p]);
    return i;

}



void quickSort(int a[],int p, int q){
    while(p<=q){
        if(p==q)return;
        else{
            int mid=partition(a,p,q);
            if(mid-p<q-mid){
                quickSort(a,p,mid-1);
                p=mid+1;
            }
            else if(mid-p>q-mid){
                quickSort(a,mid+1,q);
                q=mid-1;
            }
            
        }
    }
}



int main()
{
   int a[]={20,10,15,60,4,7,8,40,80,77};
    quickSort(a,0,9);
    for(auto j:a){
        cout<<j<<" ";
    }
    return 0;
}
